//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of Density.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class DensityTestsBase
    {
        protected abstract double CentigramsPerDeciLiterInOneKilogramPerCubicMeter { get; }
        protected abstract double CentigramsPerLiterInOneKilogramPerCubicMeter { get; }
        protected abstract double CentigramsPerMilliliterInOneKilogramPerCubicMeter { get; }
        protected abstract double DecigramsPerDeciLiterInOneKilogramPerCubicMeter { get; }
        protected abstract double DecigramsPerLiterInOneKilogramPerCubicMeter { get; }
        protected abstract double DecigramsPerMilliliterInOneKilogramPerCubicMeter { get; }
        protected abstract double GramsPerCubicCentimeterInOneKilogramPerCubicMeter { get; }
        protected abstract double GramsPerCubicMeterInOneKilogramPerCubicMeter { get; }
        protected abstract double GramsPerCubicMillimeterInOneKilogramPerCubicMeter { get; }
        protected abstract double GramsPerDeciLiterInOneKilogramPerCubicMeter { get; }
        protected abstract double GramsPerLiterInOneKilogramPerCubicMeter { get; }
        protected abstract double GramsPerMilliliterInOneKilogramPerCubicMeter { get; }
        protected abstract double KilogramsPerCubicCentimeterInOneKilogramPerCubicMeter { get; }
        protected abstract double KilogramsPerCubicDecimeterInOneKilogramPerCubicMeter { get; }
        protected abstract double KilogramsPerCubicMeterInOneKilogramPerCubicMeter { get; }
        protected abstract double KilogramsPerCubicMillimeterInOneKilogramPerCubicMeter { get; }
        protected abstract double KilogramsPerLiterInOneKilogramPerCubicMeter { get; }
        protected abstract double KilopoundsPerCubicFootInOneKilogramPerCubicMeter { get; }
        protected abstract double KilopoundsPerCubicInchInOneKilogramPerCubicMeter { get; }
        protected abstract double MicrogramsPerCubicMeterInOneKilogramPerCubicMeter { get; }
        protected abstract double MicrogramsPerDeciLiterInOneKilogramPerCubicMeter { get; }
        protected abstract double MicrogramsPerLiterInOneKilogramPerCubicMeter { get; }
        protected abstract double MicrogramsPerMilliliterInOneKilogramPerCubicMeter { get; }
        protected abstract double MilligramsPerCubicMeterInOneKilogramPerCubicMeter { get; }
        protected abstract double MilligramsPerDeciLiterInOneKilogramPerCubicMeter { get; }
        protected abstract double MilligramsPerLiterInOneKilogramPerCubicMeter { get; }
        protected abstract double MilligramsPerMilliliterInOneKilogramPerCubicMeter { get; }
        protected abstract double NanogramsPerDeciLiterInOneKilogramPerCubicMeter { get; }
        protected abstract double NanogramsPerLiterInOneKilogramPerCubicMeter { get; }
        protected abstract double NanogramsPerMilliliterInOneKilogramPerCubicMeter { get; }
        protected abstract double PicogramsPerDeciLiterInOneKilogramPerCubicMeter { get; }
        protected abstract double PicogramsPerLiterInOneKilogramPerCubicMeter { get; }
        protected abstract double PicogramsPerMilliliterInOneKilogramPerCubicMeter { get; }
        protected abstract double PoundsPerCubicFootInOneKilogramPerCubicMeter { get; }
        protected abstract double PoundsPerCubicInchInOneKilogramPerCubicMeter { get; }
        protected abstract double PoundsPerImperialGallonInOneKilogramPerCubicMeter { get; }
        protected abstract double PoundsPerUSGallonInOneKilogramPerCubicMeter { get; }
        protected abstract double SlugsPerCubicFootInOneKilogramPerCubicMeter { get; }
        protected abstract double SpecificGravityInOneKilogramPerCubicMeter { get; }
        protected abstract double TonnesPerCubicCentimeterInOneKilogramPerCubicMeter { get; }
        protected abstract double TonnesPerCubicMeterInOneKilogramPerCubicMeter { get; }
        protected abstract double TonnesPerCubicMillimeterInOneKilogramPerCubicMeter { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double CentigramsPerDeciLiterTolerance { get { return 1e-5; } }
        protected virtual double CentigramsPerLiterTolerance { get { return 1e-5; } }
        protected virtual double CentigramsPerMilliliterTolerance { get { return 1e-5; } }
        protected virtual double DecigramsPerDeciLiterTolerance { get { return 1e-5; } }
        protected virtual double DecigramsPerLiterTolerance { get { return 1e-5; } }
        protected virtual double DecigramsPerMilliliterTolerance { get { return 1e-5; } }
        protected virtual double GramsPerCubicCentimeterTolerance { get { return 1e-5; } }
        protected virtual double GramsPerCubicMeterTolerance { get { return 1e-5; } }
        protected virtual double GramsPerCubicMillimeterTolerance { get { return 1e-5; } }
        protected virtual double GramsPerDeciLiterTolerance { get { return 1e-5; } }
        protected virtual double GramsPerLiterTolerance { get { return 1e-5; } }
        protected virtual double GramsPerMilliliterTolerance { get { return 1e-5; } }
        protected virtual double KilogramsPerCubicCentimeterTolerance { get { return 1e-5; } }
        protected virtual double KilogramsPerCubicDecimeterTolerance { get { return 1e-5; } }
        protected virtual double KilogramsPerCubicMeterTolerance { get { return 1e-5; } }
        protected virtual double KilogramsPerCubicMillimeterTolerance { get { return 1e-5; } }
        protected virtual double KilogramsPerLiterTolerance { get { return 1e-5; } }
        protected virtual double KilopoundsPerCubicFootTolerance { get { return 1e-5; } }
        protected virtual double KilopoundsPerCubicInchTolerance { get { return 1e-5; } }
        protected virtual double MicrogramsPerCubicMeterTolerance { get { return 1e-5; } }
        protected virtual double MicrogramsPerDeciLiterTolerance { get { return 1e-5; } }
        protected virtual double MicrogramsPerLiterTolerance { get { return 1e-5; } }
        protected virtual double MicrogramsPerMilliliterTolerance { get { return 1e-5; } }
        protected virtual double MilligramsPerCubicMeterTolerance { get { return 1e-5; } }
        protected virtual double MilligramsPerDeciLiterTolerance { get { return 1e-5; } }
        protected virtual double MilligramsPerLiterTolerance { get { return 1e-5; } }
        protected virtual double MilligramsPerMilliliterTolerance { get { return 1e-5; } }
        protected virtual double NanogramsPerDeciLiterTolerance { get { return 1e-5; } }
        protected virtual double NanogramsPerLiterTolerance { get { return 1e-5; } }
        protected virtual double NanogramsPerMilliliterTolerance { get { return 1e-5; } }
        protected virtual double PicogramsPerDeciLiterTolerance { get { return 1e-5; } }
        protected virtual double PicogramsPerLiterTolerance { get { return 1e-5; } }
        protected virtual double PicogramsPerMilliliterTolerance { get { return 1e-5; } }
        protected virtual double PoundsPerCubicFootTolerance { get { return 1e-5; } }
        protected virtual double PoundsPerCubicInchTolerance { get { return 1e-5; } }
        protected virtual double PoundsPerImperialGallonTolerance { get { return 1e-5; } }
        protected virtual double PoundsPerUSGallonTolerance { get { return 1e-5; } }
        protected virtual double SlugsPerCubicFootTolerance { get { return 1e-5; } }
        protected virtual double SpecificGravityTolerance { get { return 1e-5; } }
        protected virtual double TonnesPerCubicCentimeterTolerance { get { return 1e-5; } }
        protected virtual double TonnesPerCubicMeterTolerance { get { return 1e-5; } }
        protected virtual double TonnesPerCubicMillimeterTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        [Fact]
        public void Ctor_WithUndefinedUnit_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new Density((double)0.0, DensityUnit.Undefined));
        }

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new Density();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(DensityUnit.KilogramPerCubicMeter, quantity.Unit);
        }


        [Fact]
        public void Ctor_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new Density(double.PositiveInfinity, DensityUnit.KilogramPerCubicMeter));
            Assert.Throws<ArgumentException>(() => new Density(double.NegativeInfinity, DensityUnit.KilogramPerCubicMeter));
        }

        [Fact]
        public void Ctor_WithNaNValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new Density(double.NaN, DensityUnit.KilogramPerCubicMeter));
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new Density(value: 1.0, unitSystem: null));
        }

        [Fact]
        public void Density_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            var quantity = new Density(1, DensityUnit.KilogramPerCubicMeter);

            QuantityInfo<DensityUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal(Density.Zero, quantityInfo.Zero);
            Assert.Equal("Density", quantityInfo.Name);
            Assert.Equal(QuantityType.Density, quantityInfo.QuantityType);

            var units = EnumUtils.GetEnumValues<DensityUnit>().Except(new[] {DensityUnit.Undefined}).ToArray();
            var unitNames = units.Select(x => x.ToString());

            // Obsolete members
#pragma warning disable 618
            Assert.Equal(units, quantityInfo.Units);
            Assert.Equal(unitNames, quantityInfo.UnitNames);
#pragma warning restore 618
        }

        [Fact]
        public void KilogramPerCubicMeterToDensityUnits()
        {
            Density kilogrampercubicmeter = Density.FromKilogramsPerCubicMeter(1);
            AssertEx.EqualTolerance(CentigramsPerDeciLiterInOneKilogramPerCubicMeter, kilogrampercubicmeter.CentigramsPerDeciLiter, CentigramsPerDeciLiterTolerance);
            AssertEx.EqualTolerance(CentigramsPerLiterInOneKilogramPerCubicMeter, kilogrampercubicmeter.CentigramsPerLiter, CentigramsPerLiterTolerance);
            AssertEx.EqualTolerance(CentigramsPerMilliliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.CentigramsPerMilliliter, CentigramsPerMilliliterTolerance);
            AssertEx.EqualTolerance(DecigramsPerDeciLiterInOneKilogramPerCubicMeter, kilogrampercubicmeter.DecigramsPerDeciLiter, DecigramsPerDeciLiterTolerance);
            AssertEx.EqualTolerance(DecigramsPerLiterInOneKilogramPerCubicMeter, kilogrampercubicmeter.DecigramsPerLiter, DecigramsPerLiterTolerance);
            AssertEx.EqualTolerance(DecigramsPerMilliliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.DecigramsPerMilliliter, DecigramsPerMilliliterTolerance);
            AssertEx.EqualTolerance(GramsPerCubicCentimeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.GramsPerCubicCentimeter, GramsPerCubicCentimeterTolerance);
            AssertEx.EqualTolerance(GramsPerCubicMeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.GramsPerCubicMeter, GramsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(GramsPerCubicMillimeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.GramsPerCubicMillimeter, GramsPerCubicMillimeterTolerance);
            AssertEx.EqualTolerance(GramsPerDeciLiterInOneKilogramPerCubicMeter, kilogrampercubicmeter.GramsPerDeciLiter, GramsPerDeciLiterTolerance);
            AssertEx.EqualTolerance(GramsPerLiterInOneKilogramPerCubicMeter, kilogrampercubicmeter.GramsPerLiter, GramsPerLiterTolerance);
            AssertEx.EqualTolerance(GramsPerMilliliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.GramsPerMilliliter, GramsPerMilliliterTolerance);
            AssertEx.EqualTolerance(KilogramsPerCubicCentimeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.KilogramsPerCubicCentimeter, KilogramsPerCubicCentimeterTolerance);
            AssertEx.EqualTolerance(KilogramsPerCubicDecimeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.KilogramsPerCubicDecimeter, KilogramsPerCubicDecimeterTolerance);
            AssertEx.EqualTolerance(KilogramsPerCubicMeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.KilogramsPerCubicMeter, KilogramsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(KilogramsPerCubicMillimeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.KilogramsPerCubicMillimeter, KilogramsPerCubicMillimeterTolerance);
            AssertEx.EqualTolerance(KilogramsPerLiterInOneKilogramPerCubicMeter, kilogrampercubicmeter.KilogramsPerLiter, KilogramsPerLiterTolerance);
            AssertEx.EqualTolerance(KilopoundsPerCubicFootInOneKilogramPerCubicMeter, kilogrampercubicmeter.KilopoundsPerCubicFoot, KilopoundsPerCubicFootTolerance);
            AssertEx.EqualTolerance(KilopoundsPerCubicInchInOneKilogramPerCubicMeter, kilogrampercubicmeter.KilopoundsPerCubicInch, KilopoundsPerCubicInchTolerance);
            AssertEx.EqualTolerance(MicrogramsPerCubicMeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.MicrogramsPerCubicMeter, MicrogramsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(MicrogramsPerDeciLiterInOneKilogramPerCubicMeter, kilogrampercubicmeter.MicrogramsPerDeciLiter, MicrogramsPerDeciLiterTolerance);
            AssertEx.EqualTolerance(MicrogramsPerLiterInOneKilogramPerCubicMeter, kilogrampercubicmeter.MicrogramsPerLiter, MicrogramsPerLiterTolerance);
            AssertEx.EqualTolerance(MicrogramsPerMilliliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.MicrogramsPerMilliliter, MicrogramsPerMilliliterTolerance);
            AssertEx.EqualTolerance(MilligramsPerCubicMeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.MilligramsPerCubicMeter, MilligramsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(MilligramsPerDeciLiterInOneKilogramPerCubicMeter, kilogrampercubicmeter.MilligramsPerDeciLiter, MilligramsPerDeciLiterTolerance);
            AssertEx.EqualTolerance(MilligramsPerLiterInOneKilogramPerCubicMeter, kilogrampercubicmeter.MilligramsPerLiter, MilligramsPerLiterTolerance);
            AssertEx.EqualTolerance(MilligramsPerMilliliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.MilligramsPerMilliliter, MilligramsPerMilliliterTolerance);
            AssertEx.EqualTolerance(NanogramsPerDeciLiterInOneKilogramPerCubicMeter, kilogrampercubicmeter.NanogramsPerDeciLiter, NanogramsPerDeciLiterTolerance);
            AssertEx.EqualTolerance(NanogramsPerLiterInOneKilogramPerCubicMeter, kilogrampercubicmeter.NanogramsPerLiter, NanogramsPerLiterTolerance);
            AssertEx.EqualTolerance(NanogramsPerMilliliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.NanogramsPerMilliliter, NanogramsPerMilliliterTolerance);
            AssertEx.EqualTolerance(PicogramsPerDeciLiterInOneKilogramPerCubicMeter, kilogrampercubicmeter.PicogramsPerDeciLiter, PicogramsPerDeciLiterTolerance);
            AssertEx.EqualTolerance(PicogramsPerLiterInOneKilogramPerCubicMeter, kilogrampercubicmeter.PicogramsPerLiter, PicogramsPerLiterTolerance);
            AssertEx.EqualTolerance(PicogramsPerMilliliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.PicogramsPerMilliliter, PicogramsPerMilliliterTolerance);
            AssertEx.EqualTolerance(PoundsPerCubicFootInOneKilogramPerCubicMeter, kilogrampercubicmeter.PoundsPerCubicFoot, PoundsPerCubicFootTolerance);
            AssertEx.EqualTolerance(PoundsPerCubicInchInOneKilogramPerCubicMeter, kilogrampercubicmeter.PoundsPerCubicInch, PoundsPerCubicInchTolerance);
            AssertEx.EqualTolerance(PoundsPerImperialGallonInOneKilogramPerCubicMeter, kilogrampercubicmeter.PoundsPerImperialGallon, PoundsPerImperialGallonTolerance);
            AssertEx.EqualTolerance(PoundsPerUSGallonInOneKilogramPerCubicMeter, kilogrampercubicmeter.PoundsPerUSGallon, PoundsPerUSGallonTolerance);
            AssertEx.EqualTolerance(SlugsPerCubicFootInOneKilogramPerCubicMeter, kilogrampercubicmeter.SlugsPerCubicFoot, SlugsPerCubicFootTolerance);
            AssertEx.EqualTolerance(SpecificGravityInOneKilogramPerCubicMeter, kilogrampercubicmeter.SpecificGravity, SpecificGravityTolerance);
            AssertEx.EqualTolerance(TonnesPerCubicCentimeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.TonnesPerCubicCentimeter, TonnesPerCubicCentimeterTolerance);
            AssertEx.EqualTolerance(TonnesPerCubicMeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.TonnesPerCubicMeter, TonnesPerCubicMeterTolerance);
            AssertEx.EqualTolerance(TonnesPerCubicMillimeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.TonnesPerCubicMillimeter, TonnesPerCubicMillimeterTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            var quantity00 = Density.From(1, DensityUnit.CentigramPerDeciliter);
            AssertEx.EqualTolerance(1, quantity00.CentigramsPerDeciLiter, CentigramsPerDeciLiterTolerance);
            Assert.Equal(DensityUnit.CentigramPerDeciliter, quantity00.Unit);

            var quantity01 = Density.From(1, DensityUnit.CentigramPerLiter);
            AssertEx.EqualTolerance(1, quantity01.CentigramsPerLiter, CentigramsPerLiterTolerance);
            Assert.Equal(DensityUnit.CentigramPerLiter, quantity01.Unit);

            var quantity02 = Density.From(1, DensityUnit.CentigramPerMilliliter);
            AssertEx.EqualTolerance(1, quantity02.CentigramsPerMilliliter, CentigramsPerMilliliterTolerance);
            Assert.Equal(DensityUnit.CentigramPerMilliliter, quantity02.Unit);

            var quantity03 = Density.From(1, DensityUnit.DecigramPerDeciliter);
            AssertEx.EqualTolerance(1, quantity03.DecigramsPerDeciLiter, DecigramsPerDeciLiterTolerance);
            Assert.Equal(DensityUnit.DecigramPerDeciliter, quantity03.Unit);

            var quantity04 = Density.From(1, DensityUnit.DecigramPerLiter);
            AssertEx.EqualTolerance(1, quantity04.DecigramsPerLiter, DecigramsPerLiterTolerance);
            Assert.Equal(DensityUnit.DecigramPerLiter, quantity04.Unit);

            var quantity05 = Density.From(1, DensityUnit.DecigramPerMilliliter);
            AssertEx.EqualTolerance(1, quantity05.DecigramsPerMilliliter, DecigramsPerMilliliterTolerance);
            Assert.Equal(DensityUnit.DecigramPerMilliliter, quantity05.Unit);

            var quantity06 = Density.From(1, DensityUnit.GramPerCubicCentimeter);
            AssertEx.EqualTolerance(1, quantity06.GramsPerCubicCentimeter, GramsPerCubicCentimeterTolerance);
            Assert.Equal(DensityUnit.GramPerCubicCentimeter, quantity06.Unit);

            var quantity07 = Density.From(1, DensityUnit.GramPerCubicMeter);
            AssertEx.EqualTolerance(1, quantity07.GramsPerCubicMeter, GramsPerCubicMeterTolerance);
            Assert.Equal(DensityUnit.GramPerCubicMeter, quantity07.Unit);

            var quantity08 = Density.From(1, DensityUnit.GramPerCubicMillimeter);
            AssertEx.EqualTolerance(1, quantity08.GramsPerCubicMillimeter, GramsPerCubicMillimeterTolerance);
            Assert.Equal(DensityUnit.GramPerCubicMillimeter, quantity08.Unit);

            var quantity09 = Density.From(1, DensityUnit.GramPerDeciliter);
            AssertEx.EqualTolerance(1, quantity09.GramsPerDeciLiter, GramsPerDeciLiterTolerance);
            Assert.Equal(DensityUnit.GramPerDeciliter, quantity09.Unit);

            var quantity10 = Density.From(1, DensityUnit.GramPerLiter);
            AssertEx.EqualTolerance(1, quantity10.GramsPerLiter, GramsPerLiterTolerance);
            Assert.Equal(DensityUnit.GramPerLiter, quantity10.Unit);

            var quantity11 = Density.From(1, DensityUnit.GramPerMilliliter);
            AssertEx.EqualTolerance(1, quantity11.GramsPerMilliliter, GramsPerMilliliterTolerance);
            Assert.Equal(DensityUnit.GramPerMilliliter, quantity11.Unit);

            var quantity12 = Density.From(1, DensityUnit.KilogramPerCubicCentimeter);
            AssertEx.EqualTolerance(1, quantity12.KilogramsPerCubicCentimeter, KilogramsPerCubicCentimeterTolerance);
            Assert.Equal(DensityUnit.KilogramPerCubicCentimeter, quantity12.Unit);

            var quantity13 = Density.From(1, DensityUnit.KilogramPerCubicDecimeter);
            AssertEx.EqualTolerance(1, quantity13.KilogramsPerCubicDecimeter, KilogramsPerCubicDecimeterTolerance);
            Assert.Equal(DensityUnit.KilogramPerCubicDecimeter, quantity13.Unit);

            var quantity14 = Density.From(1, DensityUnit.KilogramPerCubicMeter);
            AssertEx.EqualTolerance(1, quantity14.KilogramsPerCubicMeter, KilogramsPerCubicMeterTolerance);
            Assert.Equal(DensityUnit.KilogramPerCubicMeter, quantity14.Unit);

            var quantity15 = Density.From(1, DensityUnit.KilogramPerCubicMillimeter);
            AssertEx.EqualTolerance(1, quantity15.KilogramsPerCubicMillimeter, KilogramsPerCubicMillimeterTolerance);
            Assert.Equal(DensityUnit.KilogramPerCubicMillimeter, quantity15.Unit);

            var quantity16 = Density.From(1, DensityUnit.KilogramPerLiter);
            AssertEx.EqualTolerance(1, quantity16.KilogramsPerLiter, KilogramsPerLiterTolerance);
            Assert.Equal(DensityUnit.KilogramPerLiter, quantity16.Unit);

            var quantity17 = Density.From(1, DensityUnit.KilopoundPerCubicFoot);
            AssertEx.EqualTolerance(1, quantity17.KilopoundsPerCubicFoot, KilopoundsPerCubicFootTolerance);
            Assert.Equal(DensityUnit.KilopoundPerCubicFoot, quantity17.Unit);

            var quantity18 = Density.From(1, DensityUnit.KilopoundPerCubicInch);
            AssertEx.EqualTolerance(1, quantity18.KilopoundsPerCubicInch, KilopoundsPerCubicInchTolerance);
            Assert.Equal(DensityUnit.KilopoundPerCubicInch, quantity18.Unit);

            var quantity19 = Density.From(1, DensityUnit.MicrogramPerCubicMeter);
            AssertEx.EqualTolerance(1, quantity19.MicrogramsPerCubicMeter, MicrogramsPerCubicMeterTolerance);
            Assert.Equal(DensityUnit.MicrogramPerCubicMeter, quantity19.Unit);

            var quantity20 = Density.From(1, DensityUnit.MicrogramPerDeciliter);
            AssertEx.EqualTolerance(1, quantity20.MicrogramsPerDeciLiter, MicrogramsPerDeciLiterTolerance);
            Assert.Equal(DensityUnit.MicrogramPerDeciliter, quantity20.Unit);

            var quantity21 = Density.From(1, DensityUnit.MicrogramPerLiter);
            AssertEx.EqualTolerance(1, quantity21.MicrogramsPerLiter, MicrogramsPerLiterTolerance);
            Assert.Equal(DensityUnit.MicrogramPerLiter, quantity21.Unit);

            var quantity22 = Density.From(1, DensityUnit.MicrogramPerMilliliter);
            AssertEx.EqualTolerance(1, quantity22.MicrogramsPerMilliliter, MicrogramsPerMilliliterTolerance);
            Assert.Equal(DensityUnit.MicrogramPerMilliliter, quantity22.Unit);

            var quantity23 = Density.From(1, DensityUnit.MilligramPerCubicMeter);
            AssertEx.EqualTolerance(1, quantity23.MilligramsPerCubicMeter, MilligramsPerCubicMeterTolerance);
            Assert.Equal(DensityUnit.MilligramPerCubicMeter, quantity23.Unit);

            var quantity24 = Density.From(1, DensityUnit.MilligramPerDeciliter);
            AssertEx.EqualTolerance(1, quantity24.MilligramsPerDeciLiter, MilligramsPerDeciLiterTolerance);
            Assert.Equal(DensityUnit.MilligramPerDeciliter, quantity24.Unit);

            var quantity25 = Density.From(1, DensityUnit.MilligramPerLiter);
            AssertEx.EqualTolerance(1, quantity25.MilligramsPerLiter, MilligramsPerLiterTolerance);
            Assert.Equal(DensityUnit.MilligramPerLiter, quantity25.Unit);

            var quantity26 = Density.From(1, DensityUnit.MilligramPerMilliliter);
            AssertEx.EqualTolerance(1, quantity26.MilligramsPerMilliliter, MilligramsPerMilliliterTolerance);
            Assert.Equal(DensityUnit.MilligramPerMilliliter, quantity26.Unit);

            var quantity27 = Density.From(1, DensityUnit.NanogramPerDeciliter);
            AssertEx.EqualTolerance(1, quantity27.NanogramsPerDeciLiter, NanogramsPerDeciLiterTolerance);
            Assert.Equal(DensityUnit.NanogramPerDeciliter, quantity27.Unit);

            var quantity28 = Density.From(1, DensityUnit.NanogramPerLiter);
            AssertEx.EqualTolerance(1, quantity28.NanogramsPerLiter, NanogramsPerLiterTolerance);
            Assert.Equal(DensityUnit.NanogramPerLiter, quantity28.Unit);

            var quantity29 = Density.From(1, DensityUnit.NanogramPerMilliliter);
            AssertEx.EqualTolerance(1, quantity29.NanogramsPerMilliliter, NanogramsPerMilliliterTolerance);
            Assert.Equal(DensityUnit.NanogramPerMilliliter, quantity29.Unit);

            var quantity30 = Density.From(1, DensityUnit.PicogramPerDeciliter);
            AssertEx.EqualTolerance(1, quantity30.PicogramsPerDeciLiter, PicogramsPerDeciLiterTolerance);
            Assert.Equal(DensityUnit.PicogramPerDeciliter, quantity30.Unit);

            var quantity31 = Density.From(1, DensityUnit.PicogramPerLiter);
            AssertEx.EqualTolerance(1, quantity31.PicogramsPerLiter, PicogramsPerLiterTolerance);
            Assert.Equal(DensityUnit.PicogramPerLiter, quantity31.Unit);

            var quantity32 = Density.From(1, DensityUnit.PicogramPerMilliliter);
            AssertEx.EqualTolerance(1, quantity32.PicogramsPerMilliliter, PicogramsPerMilliliterTolerance);
            Assert.Equal(DensityUnit.PicogramPerMilliliter, quantity32.Unit);

            var quantity33 = Density.From(1, DensityUnit.PoundPerCubicFoot);
            AssertEx.EqualTolerance(1, quantity33.PoundsPerCubicFoot, PoundsPerCubicFootTolerance);
            Assert.Equal(DensityUnit.PoundPerCubicFoot, quantity33.Unit);

            var quantity34 = Density.From(1, DensityUnit.PoundPerCubicInch);
            AssertEx.EqualTolerance(1, quantity34.PoundsPerCubicInch, PoundsPerCubicInchTolerance);
            Assert.Equal(DensityUnit.PoundPerCubicInch, quantity34.Unit);

            var quantity35 = Density.From(1, DensityUnit.PoundPerImperialGallon);
            AssertEx.EqualTolerance(1, quantity35.PoundsPerImperialGallon, PoundsPerImperialGallonTolerance);
            Assert.Equal(DensityUnit.PoundPerImperialGallon, quantity35.Unit);

            var quantity36 = Density.From(1, DensityUnit.PoundPerUSGallon);
            AssertEx.EqualTolerance(1, quantity36.PoundsPerUSGallon, PoundsPerUSGallonTolerance);
            Assert.Equal(DensityUnit.PoundPerUSGallon, quantity36.Unit);

            var quantity37 = Density.From(1, DensityUnit.SlugPerCubicFoot);
            AssertEx.EqualTolerance(1, quantity37.SlugsPerCubicFoot, SlugsPerCubicFootTolerance);
            Assert.Equal(DensityUnit.SlugPerCubicFoot, quantity37.Unit);

            var quantity38 = Density.From(1, DensityUnit.SpecificGravity);
            AssertEx.EqualTolerance(1, quantity38.SpecificGravity, SpecificGravityTolerance);
            Assert.Equal(DensityUnit.SpecificGravity, quantity38.Unit);

            var quantity39 = Density.From(1, DensityUnit.TonnePerCubicCentimeter);
            AssertEx.EqualTolerance(1, quantity39.TonnesPerCubicCentimeter, TonnesPerCubicCentimeterTolerance);
            Assert.Equal(DensityUnit.TonnePerCubicCentimeter, quantity39.Unit);

            var quantity40 = Density.From(1, DensityUnit.TonnePerCubicMeter);
            AssertEx.EqualTolerance(1, quantity40.TonnesPerCubicMeter, TonnesPerCubicMeterTolerance);
            Assert.Equal(DensityUnit.TonnePerCubicMeter, quantity40.Unit);

            var quantity41 = Density.From(1, DensityUnit.TonnePerCubicMillimeter);
            AssertEx.EqualTolerance(1, quantity41.TonnesPerCubicMillimeter, TonnesPerCubicMillimeterTolerance);
            Assert.Equal(DensityUnit.TonnePerCubicMillimeter, quantity41.Unit);

        }

        [Fact]
        public void FromKilogramsPerCubicMeter_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => Density.FromKilogramsPerCubicMeter(double.PositiveInfinity));
            Assert.Throws<ArgumentException>(() => Density.FromKilogramsPerCubicMeter(double.NegativeInfinity));
        }

        [Fact]
        public void FromKilogramsPerCubicMeter_WithNanValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => Density.FromKilogramsPerCubicMeter(double.NaN));
        }

        [Fact]
        public void As()
        {
            var kilogrampercubicmeter = Density.FromKilogramsPerCubicMeter(1);
            AssertEx.EqualTolerance(CentigramsPerDeciLiterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.CentigramPerDeciliter), CentigramsPerDeciLiterTolerance);
            AssertEx.EqualTolerance(CentigramsPerLiterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.CentigramPerLiter), CentigramsPerLiterTolerance);
            AssertEx.EqualTolerance(CentigramsPerMilliliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.CentigramPerMilliliter), CentigramsPerMilliliterTolerance);
            AssertEx.EqualTolerance(DecigramsPerDeciLiterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.DecigramPerDeciliter), DecigramsPerDeciLiterTolerance);
            AssertEx.EqualTolerance(DecigramsPerLiterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.DecigramPerLiter), DecigramsPerLiterTolerance);
            AssertEx.EqualTolerance(DecigramsPerMilliliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.DecigramPerMilliliter), DecigramsPerMilliliterTolerance);
            AssertEx.EqualTolerance(GramsPerCubicCentimeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.GramPerCubicCentimeter), GramsPerCubicCentimeterTolerance);
            AssertEx.EqualTolerance(GramsPerCubicMeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.GramPerCubicMeter), GramsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(GramsPerCubicMillimeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.GramPerCubicMillimeter), GramsPerCubicMillimeterTolerance);
            AssertEx.EqualTolerance(GramsPerDeciLiterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.GramPerDeciliter), GramsPerDeciLiterTolerance);
            AssertEx.EqualTolerance(GramsPerLiterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.GramPerLiter), GramsPerLiterTolerance);
            AssertEx.EqualTolerance(GramsPerMilliliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.GramPerMilliliter), GramsPerMilliliterTolerance);
            AssertEx.EqualTolerance(KilogramsPerCubicCentimeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.KilogramPerCubicCentimeter), KilogramsPerCubicCentimeterTolerance);
            AssertEx.EqualTolerance(KilogramsPerCubicDecimeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.KilogramPerCubicDecimeter), KilogramsPerCubicDecimeterTolerance);
            AssertEx.EqualTolerance(KilogramsPerCubicMeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.KilogramPerCubicMeter), KilogramsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(KilogramsPerCubicMillimeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.KilogramPerCubicMillimeter), KilogramsPerCubicMillimeterTolerance);
            AssertEx.EqualTolerance(KilogramsPerLiterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.KilogramPerLiter), KilogramsPerLiterTolerance);
            AssertEx.EqualTolerance(KilopoundsPerCubicFootInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.KilopoundPerCubicFoot), KilopoundsPerCubicFootTolerance);
            AssertEx.EqualTolerance(KilopoundsPerCubicInchInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.KilopoundPerCubicInch), KilopoundsPerCubicInchTolerance);
            AssertEx.EqualTolerance(MicrogramsPerCubicMeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.MicrogramPerCubicMeter), MicrogramsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(MicrogramsPerDeciLiterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.MicrogramPerDeciliter), MicrogramsPerDeciLiterTolerance);
            AssertEx.EqualTolerance(MicrogramsPerLiterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.MicrogramPerLiter), MicrogramsPerLiterTolerance);
            AssertEx.EqualTolerance(MicrogramsPerMilliliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.MicrogramPerMilliliter), MicrogramsPerMilliliterTolerance);
            AssertEx.EqualTolerance(MilligramsPerCubicMeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.MilligramPerCubicMeter), MilligramsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(MilligramsPerDeciLiterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.MilligramPerDeciliter), MilligramsPerDeciLiterTolerance);
            AssertEx.EqualTolerance(MilligramsPerLiterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.MilligramPerLiter), MilligramsPerLiterTolerance);
            AssertEx.EqualTolerance(MilligramsPerMilliliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.MilligramPerMilliliter), MilligramsPerMilliliterTolerance);
            AssertEx.EqualTolerance(NanogramsPerDeciLiterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.NanogramPerDeciliter), NanogramsPerDeciLiterTolerance);
            AssertEx.EqualTolerance(NanogramsPerLiterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.NanogramPerLiter), NanogramsPerLiterTolerance);
            AssertEx.EqualTolerance(NanogramsPerMilliliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.NanogramPerMilliliter), NanogramsPerMilliliterTolerance);
            AssertEx.EqualTolerance(PicogramsPerDeciLiterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.PicogramPerDeciliter), PicogramsPerDeciLiterTolerance);
            AssertEx.EqualTolerance(PicogramsPerLiterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.PicogramPerLiter), PicogramsPerLiterTolerance);
            AssertEx.EqualTolerance(PicogramsPerMilliliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.PicogramPerMilliliter), PicogramsPerMilliliterTolerance);
            AssertEx.EqualTolerance(PoundsPerCubicFootInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.PoundPerCubicFoot), PoundsPerCubicFootTolerance);
            AssertEx.EqualTolerance(PoundsPerCubicInchInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.PoundPerCubicInch), PoundsPerCubicInchTolerance);
            AssertEx.EqualTolerance(PoundsPerImperialGallonInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.PoundPerImperialGallon), PoundsPerImperialGallonTolerance);
            AssertEx.EqualTolerance(PoundsPerUSGallonInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.PoundPerUSGallon), PoundsPerUSGallonTolerance);
            AssertEx.EqualTolerance(SlugsPerCubicFootInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.SlugPerCubicFoot), SlugsPerCubicFootTolerance);
            AssertEx.EqualTolerance(SpecificGravityInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.SpecificGravity), SpecificGravityTolerance);
            AssertEx.EqualTolerance(TonnesPerCubicCentimeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.TonnePerCubicCentimeter), TonnesPerCubicCentimeterTolerance);
            AssertEx.EqualTolerance(TonnesPerCubicMeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.TonnePerCubicMeter), TonnesPerCubicMeterTolerance);
            AssertEx.EqualTolerance(TonnesPerCubicMillimeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.TonnePerCubicMillimeter), TonnesPerCubicMillimeterTolerance);
        }

        [Fact]
        public void ToUnit()
        {
            var kilogrampercubicmeter = Density.FromKilogramsPerCubicMeter(1);

            var centigramperdeciliterQuantity = kilogrampercubicmeter.ToUnit(DensityUnit.CentigramPerDeciliter);
            AssertEx.EqualTolerance(CentigramsPerDeciLiterInOneKilogramPerCubicMeter, (double)centigramperdeciliterQuantity.Value, CentigramsPerDeciLiterTolerance);
            Assert.Equal(DensityUnit.CentigramPerDeciliter, centigramperdeciliterQuantity.Unit);

            var centigramperliterQuantity = kilogrampercubicmeter.ToUnit(DensityUnit.CentigramPerLiter);
            AssertEx.EqualTolerance(CentigramsPerLiterInOneKilogramPerCubicMeter, (double)centigramperliterQuantity.Value, CentigramsPerLiterTolerance);
            Assert.Equal(DensityUnit.CentigramPerLiter, centigramperliterQuantity.Unit);

            var centigrampermilliliterQuantity = kilogrampercubicmeter.ToUnit(DensityUnit.CentigramPerMilliliter);
            AssertEx.EqualTolerance(CentigramsPerMilliliterInOneKilogramPerCubicMeter, (double)centigrampermilliliterQuantity.Value, CentigramsPerMilliliterTolerance);
            Assert.Equal(DensityUnit.CentigramPerMilliliter, centigrampermilliliterQuantity.Unit);

            var decigramperdeciliterQuantity = kilogrampercubicmeter.ToUnit(DensityUnit.DecigramPerDeciliter);
            AssertEx.EqualTolerance(DecigramsPerDeciLiterInOneKilogramPerCubicMeter, (double)decigramperdeciliterQuantity.Value, DecigramsPerDeciLiterTolerance);
            Assert.Equal(DensityUnit.DecigramPerDeciliter, decigramperdeciliterQuantity.Unit);

            var decigramperliterQuantity = kilogrampercubicmeter.ToUnit(DensityUnit.DecigramPerLiter);
            AssertEx.EqualTolerance(DecigramsPerLiterInOneKilogramPerCubicMeter, (double)decigramperliterQuantity.Value, DecigramsPerLiterTolerance);
            Assert.Equal(DensityUnit.DecigramPerLiter, decigramperliterQuantity.Unit);

            var decigrampermilliliterQuantity = kilogrampercubicmeter.ToUnit(DensityUnit.DecigramPerMilliliter);
            AssertEx.EqualTolerance(DecigramsPerMilliliterInOneKilogramPerCubicMeter, (double)decigrampermilliliterQuantity.Value, DecigramsPerMilliliterTolerance);
            Assert.Equal(DensityUnit.DecigramPerMilliliter, decigrampermilliliterQuantity.Unit);

            var grampercubiccentimeterQuantity = kilogrampercubicmeter.ToUnit(DensityUnit.GramPerCubicCentimeter);
            AssertEx.EqualTolerance(GramsPerCubicCentimeterInOneKilogramPerCubicMeter, (double)grampercubiccentimeterQuantity.Value, GramsPerCubicCentimeterTolerance);
            Assert.Equal(DensityUnit.GramPerCubicCentimeter, grampercubiccentimeterQuantity.Unit);

            var grampercubicmeterQuantity = kilogrampercubicmeter.ToUnit(DensityUnit.GramPerCubicMeter);
            AssertEx.EqualTolerance(GramsPerCubicMeterInOneKilogramPerCubicMeter, (double)grampercubicmeterQuantity.Value, GramsPerCubicMeterTolerance);
            Assert.Equal(DensityUnit.GramPerCubicMeter, grampercubicmeterQuantity.Unit);

            var grampercubicmillimeterQuantity = kilogrampercubicmeter.ToUnit(DensityUnit.GramPerCubicMillimeter);
            AssertEx.EqualTolerance(GramsPerCubicMillimeterInOneKilogramPerCubicMeter, (double)grampercubicmillimeterQuantity.Value, GramsPerCubicMillimeterTolerance);
            Assert.Equal(DensityUnit.GramPerCubicMillimeter, grampercubicmillimeterQuantity.Unit);

            var gramperdeciliterQuantity = kilogrampercubicmeter.ToUnit(DensityUnit.GramPerDeciliter);
            AssertEx.EqualTolerance(GramsPerDeciLiterInOneKilogramPerCubicMeter, (double)gramperdeciliterQuantity.Value, GramsPerDeciLiterTolerance);
            Assert.Equal(DensityUnit.GramPerDeciliter, gramperdeciliterQuantity.Unit);

            var gramperliterQuantity = kilogrampercubicmeter.ToUnit(DensityUnit.GramPerLiter);
            AssertEx.EqualTolerance(GramsPerLiterInOneKilogramPerCubicMeter, (double)gramperliterQuantity.Value, GramsPerLiterTolerance);
            Assert.Equal(DensityUnit.GramPerLiter, gramperliterQuantity.Unit);

            var grampermilliliterQuantity = kilogrampercubicmeter.ToUnit(DensityUnit.GramPerMilliliter);
            AssertEx.EqualTolerance(GramsPerMilliliterInOneKilogramPerCubicMeter, (double)grampermilliliterQuantity.Value, GramsPerMilliliterTolerance);
            Assert.Equal(DensityUnit.GramPerMilliliter, grampermilliliterQuantity.Unit);

            var kilogrampercubiccentimeterQuantity = kilogrampercubicmeter.ToUnit(DensityUnit.KilogramPerCubicCentimeter);
            AssertEx.EqualTolerance(KilogramsPerCubicCentimeterInOneKilogramPerCubicMeter, (double)kilogrampercubiccentimeterQuantity.Value, KilogramsPerCubicCentimeterTolerance);
            Assert.Equal(DensityUnit.KilogramPerCubicCentimeter, kilogrampercubiccentimeterQuantity.Unit);

            var kilogrampercubicdecimeterQuantity = kilogrampercubicmeter.ToUnit(DensityUnit.KilogramPerCubicDecimeter);
            AssertEx.EqualTolerance(KilogramsPerCubicDecimeterInOneKilogramPerCubicMeter, (double)kilogrampercubicdecimeterQuantity.Value, KilogramsPerCubicDecimeterTolerance);
            Assert.Equal(DensityUnit.KilogramPerCubicDecimeter, kilogrampercubicdecimeterQuantity.Unit);

            var kilogrampercubicmeterQuantity = kilogrampercubicmeter.ToUnit(DensityUnit.KilogramPerCubicMeter);
            AssertEx.EqualTolerance(KilogramsPerCubicMeterInOneKilogramPerCubicMeter, (double)kilogrampercubicmeterQuantity.Value, KilogramsPerCubicMeterTolerance);
            Assert.Equal(DensityUnit.KilogramPerCubicMeter, kilogrampercubicmeterQuantity.Unit);

            var kilogrampercubicmillimeterQuantity = kilogrampercubicmeter.ToUnit(DensityUnit.KilogramPerCubicMillimeter);
            AssertEx.EqualTolerance(KilogramsPerCubicMillimeterInOneKilogramPerCubicMeter, (double)kilogrampercubicmillimeterQuantity.Value, KilogramsPerCubicMillimeterTolerance);
            Assert.Equal(DensityUnit.KilogramPerCubicMillimeter, kilogrampercubicmillimeterQuantity.Unit);

            var kilogramperliterQuantity = kilogrampercubicmeter.ToUnit(DensityUnit.KilogramPerLiter);
            AssertEx.EqualTolerance(KilogramsPerLiterInOneKilogramPerCubicMeter, (double)kilogramperliterQuantity.Value, KilogramsPerLiterTolerance);
            Assert.Equal(DensityUnit.KilogramPerLiter, kilogramperliterQuantity.Unit);

            var kilopoundpercubicfootQuantity = kilogrampercubicmeter.ToUnit(DensityUnit.KilopoundPerCubicFoot);
            AssertEx.EqualTolerance(KilopoundsPerCubicFootInOneKilogramPerCubicMeter, (double)kilopoundpercubicfootQuantity.Value, KilopoundsPerCubicFootTolerance);
            Assert.Equal(DensityUnit.KilopoundPerCubicFoot, kilopoundpercubicfootQuantity.Unit);

            var kilopoundpercubicinchQuantity = kilogrampercubicmeter.ToUnit(DensityUnit.KilopoundPerCubicInch);
            AssertEx.EqualTolerance(KilopoundsPerCubicInchInOneKilogramPerCubicMeter, (double)kilopoundpercubicinchQuantity.Value, KilopoundsPerCubicInchTolerance);
            Assert.Equal(DensityUnit.KilopoundPerCubicInch, kilopoundpercubicinchQuantity.Unit);

            var microgrampercubicmeterQuantity = kilogrampercubicmeter.ToUnit(DensityUnit.MicrogramPerCubicMeter);
            AssertEx.EqualTolerance(MicrogramsPerCubicMeterInOneKilogramPerCubicMeter, (double)microgrampercubicmeterQuantity.Value, MicrogramsPerCubicMeterTolerance);
            Assert.Equal(DensityUnit.MicrogramPerCubicMeter, microgrampercubicmeterQuantity.Unit);

            var microgramperdeciliterQuantity = kilogrampercubicmeter.ToUnit(DensityUnit.MicrogramPerDeciliter);
            AssertEx.EqualTolerance(MicrogramsPerDeciLiterInOneKilogramPerCubicMeter, (double)microgramperdeciliterQuantity.Value, MicrogramsPerDeciLiterTolerance);
            Assert.Equal(DensityUnit.MicrogramPerDeciliter, microgramperdeciliterQuantity.Unit);

            var microgramperliterQuantity = kilogrampercubicmeter.ToUnit(DensityUnit.MicrogramPerLiter);
            AssertEx.EqualTolerance(MicrogramsPerLiterInOneKilogramPerCubicMeter, (double)microgramperliterQuantity.Value, MicrogramsPerLiterTolerance);
            Assert.Equal(DensityUnit.MicrogramPerLiter, microgramperliterQuantity.Unit);

            var microgrampermilliliterQuantity = kilogrampercubicmeter.ToUnit(DensityUnit.MicrogramPerMilliliter);
            AssertEx.EqualTolerance(MicrogramsPerMilliliterInOneKilogramPerCubicMeter, (double)microgrampermilliliterQuantity.Value, MicrogramsPerMilliliterTolerance);
            Assert.Equal(DensityUnit.MicrogramPerMilliliter, microgrampermilliliterQuantity.Unit);

            var milligrampercubicmeterQuantity = kilogrampercubicmeter.ToUnit(DensityUnit.MilligramPerCubicMeter);
            AssertEx.EqualTolerance(MilligramsPerCubicMeterInOneKilogramPerCubicMeter, (double)milligrampercubicmeterQuantity.Value, MilligramsPerCubicMeterTolerance);
            Assert.Equal(DensityUnit.MilligramPerCubicMeter, milligrampercubicmeterQuantity.Unit);

            var milligramperdeciliterQuantity = kilogrampercubicmeter.ToUnit(DensityUnit.MilligramPerDeciliter);
            AssertEx.EqualTolerance(MilligramsPerDeciLiterInOneKilogramPerCubicMeter, (double)milligramperdeciliterQuantity.Value, MilligramsPerDeciLiterTolerance);
            Assert.Equal(DensityUnit.MilligramPerDeciliter, milligramperdeciliterQuantity.Unit);

            var milligramperliterQuantity = kilogrampercubicmeter.ToUnit(DensityUnit.MilligramPerLiter);
            AssertEx.EqualTolerance(MilligramsPerLiterInOneKilogramPerCubicMeter, (double)milligramperliterQuantity.Value, MilligramsPerLiterTolerance);
            Assert.Equal(DensityUnit.MilligramPerLiter, milligramperliterQuantity.Unit);

            var milligrampermilliliterQuantity = kilogrampercubicmeter.ToUnit(DensityUnit.MilligramPerMilliliter);
            AssertEx.EqualTolerance(MilligramsPerMilliliterInOneKilogramPerCubicMeter, (double)milligrampermilliliterQuantity.Value, MilligramsPerMilliliterTolerance);
            Assert.Equal(DensityUnit.MilligramPerMilliliter, milligrampermilliliterQuantity.Unit);

            var nanogramperdeciliterQuantity = kilogrampercubicmeter.ToUnit(DensityUnit.NanogramPerDeciliter);
            AssertEx.EqualTolerance(NanogramsPerDeciLiterInOneKilogramPerCubicMeter, (double)nanogramperdeciliterQuantity.Value, NanogramsPerDeciLiterTolerance);
            Assert.Equal(DensityUnit.NanogramPerDeciliter, nanogramperdeciliterQuantity.Unit);

            var nanogramperliterQuantity = kilogrampercubicmeter.ToUnit(DensityUnit.NanogramPerLiter);
            AssertEx.EqualTolerance(NanogramsPerLiterInOneKilogramPerCubicMeter, (double)nanogramperliterQuantity.Value, NanogramsPerLiterTolerance);
            Assert.Equal(DensityUnit.NanogramPerLiter, nanogramperliterQuantity.Unit);

            var nanogrampermilliliterQuantity = kilogrampercubicmeter.ToUnit(DensityUnit.NanogramPerMilliliter);
            AssertEx.EqualTolerance(NanogramsPerMilliliterInOneKilogramPerCubicMeter, (double)nanogrampermilliliterQuantity.Value, NanogramsPerMilliliterTolerance);
            Assert.Equal(DensityUnit.NanogramPerMilliliter, nanogrampermilliliterQuantity.Unit);

            var picogramperdeciliterQuantity = kilogrampercubicmeter.ToUnit(DensityUnit.PicogramPerDeciliter);
            AssertEx.EqualTolerance(PicogramsPerDeciLiterInOneKilogramPerCubicMeter, (double)picogramperdeciliterQuantity.Value, PicogramsPerDeciLiterTolerance);
            Assert.Equal(DensityUnit.PicogramPerDeciliter, picogramperdeciliterQuantity.Unit);

            var picogramperliterQuantity = kilogrampercubicmeter.ToUnit(DensityUnit.PicogramPerLiter);
            AssertEx.EqualTolerance(PicogramsPerLiterInOneKilogramPerCubicMeter, (double)picogramperliterQuantity.Value, PicogramsPerLiterTolerance);
            Assert.Equal(DensityUnit.PicogramPerLiter, picogramperliterQuantity.Unit);

            var picogrampermilliliterQuantity = kilogrampercubicmeter.ToUnit(DensityUnit.PicogramPerMilliliter);
            AssertEx.EqualTolerance(PicogramsPerMilliliterInOneKilogramPerCubicMeter, (double)picogrampermilliliterQuantity.Value, PicogramsPerMilliliterTolerance);
            Assert.Equal(DensityUnit.PicogramPerMilliliter, picogrampermilliliterQuantity.Unit);

            var poundpercubicfootQuantity = kilogrampercubicmeter.ToUnit(DensityUnit.PoundPerCubicFoot);
            AssertEx.EqualTolerance(PoundsPerCubicFootInOneKilogramPerCubicMeter, (double)poundpercubicfootQuantity.Value, PoundsPerCubicFootTolerance);
            Assert.Equal(DensityUnit.PoundPerCubicFoot, poundpercubicfootQuantity.Unit);

            var poundpercubicinchQuantity = kilogrampercubicmeter.ToUnit(DensityUnit.PoundPerCubicInch);
            AssertEx.EqualTolerance(PoundsPerCubicInchInOneKilogramPerCubicMeter, (double)poundpercubicinchQuantity.Value, PoundsPerCubicInchTolerance);
            Assert.Equal(DensityUnit.PoundPerCubicInch, poundpercubicinchQuantity.Unit);

            var poundperimperialgallonQuantity = kilogrampercubicmeter.ToUnit(DensityUnit.PoundPerImperialGallon);
            AssertEx.EqualTolerance(PoundsPerImperialGallonInOneKilogramPerCubicMeter, (double)poundperimperialgallonQuantity.Value, PoundsPerImperialGallonTolerance);
            Assert.Equal(DensityUnit.PoundPerImperialGallon, poundperimperialgallonQuantity.Unit);

            var poundperusgallonQuantity = kilogrampercubicmeter.ToUnit(DensityUnit.PoundPerUSGallon);
            AssertEx.EqualTolerance(PoundsPerUSGallonInOneKilogramPerCubicMeter, (double)poundperusgallonQuantity.Value, PoundsPerUSGallonTolerance);
            Assert.Equal(DensityUnit.PoundPerUSGallon, poundperusgallonQuantity.Unit);

            var slugpercubicfootQuantity = kilogrampercubicmeter.ToUnit(DensityUnit.SlugPerCubicFoot);
            AssertEx.EqualTolerance(SlugsPerCubicFootInOneKilogramPerCubicMeter, (double)slugpercubicfootQuantity.Value, SlugsPerCubicFootTolerance);
            Assert.Equal(DensityUnit.SlugPerCubicFoot, slugpercubicfootQuantity.Unit);

            var specificgravityQuantity = kilogrampercubicmeter.ToUnit(DensityUnit.SpecificGravity);
            AssertEx.EqualTolerance(SpecificGravityInOneKilogramPerCubicMeter, (double)specificgravityQuantity.Value, SpecificGravityTolerance);
            Assert.Equal(DensityUnit.SpecificGravity, specificgravityQuantity.Unit);

            var tonnepercubiccentimeterQuantity = kilogrampercubicmeter.ToUnit(DensityUnit.TonnePerCubicCentimeter);
            AssertEx.EqualTolerance(TonnesPerCubicCentimeterInOneKilogramPerCubicMeter, (double)tonnepercubiccentimeterQuantity.Value, TonnesPerCubicCentimeterTolerance);
            Assert.Equal(DensityUnit.TonnePerCubicCentimeter, tonnepercubiccentimeterQuantity.Unit);

            var tonnepercubicmeterQuantity = kilogrampercubicmeter.ToUnit(DensityUnit.TonnePerCubicMeter);
            AssertEx.EqualTolerance(TonnesPerCubicMeterInOneKilogramPerCubicMeter, (double)tonnepercubicmeterQuantity.Value, TonnesPerCubicMeterTolerance);
            Assert.Equal(DensityUnit.TonnePerCubicMeter, tonnepercubicmeterQuantity.Unit);

            var tonnepercubicmillimeterQuantity = kilogrampercubicmeter.ToUnit(DensityUnit.TonnePerCubicMillimeter);
            AssertEx.EqualTolerance(TonnesPerCubicMillimeterInOneKilogramPerCubicMeter, (double)tonnepercubicmillimeterQuantity.Value, TonnesPerCubicMillimeterTolerance);
            Assert.Equal(DensityUnit.TonnePerCubicMillimeter, tonnepercubicmillimeterQuantity.Unit);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            Density kilogrampercubicmeter = Density.FromKilogramsPerCubicMeter(1);
            AssertEx.EqualTolerance(1, Density.FromCentigramsPerDeciLiter(kilogrampercubicmeter.CentigramsPerDeciLiter).KilogramsPerCubicMeter, CentigramsPerDeciLiterTolerance);
            AssertEx.EqualTolerance(1, Density.FromCentigramsPerLiter(kilogrampercubicmeter.CentigramsPerLiter).KilogramsPerCubicMeter, CentigramsPerLiterTolerance);
            AssertEx.EqualTolerance(1, Density.FromCentigramsPerMilliliter(kilogrampercubicmeter.CentigramsPerMilliliter).KilogramsPerCubicMeter, CentigramsPerMilliliterTolerance);
            AssertEx.EqualTolerance(1, Density.FromDecigramsPerDeciLiter(kilogrampercubicmeter.DecigramsPerDeciLiter).KilogramsPerCubicMeter, DecigramsPerDeciLiterTolerance);
            AssertEx.EqualTolerance(1, Density.FromDecigramsPerLiter(kilogrampercubicmeter.DecigramsPerLiter).KilogramsPerCubicMeter, DecigramsPerLiterTolerance);
            AssertEx.EqualTolerance(1, Density.FromDecigramsPerMilliliter(kilogrampercubicmeter.DecigramsPerMilliliter).KilogramsPerCubicMeter, DecigramsPerMilliliterTolerance);
            AssertEx.EqualTolerance(1, Density.FromGramsPerCubicCentimeter(kilogrampercubicmeter.GramsPerCubicCentimeter).KilogramsPerCubicMeter, GramsPerCubicCentimeterTolerance);
            AssertEx.EqualTolerance(1, Density.FromGramsPerCubicMeter(kilogrampercubicmeter.GramsPerCubicMeter).KilogramsPerCubicMeter, GramsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(1, Density.FromGramsPerCubicMillimeter(kilogrampercubicmeter.GramsPerCubicMillimeter).KilogramsPerCubicMeter, GramsPerCubicMillimeterTolerance);
            AssertEx.EqualTolerance(1, Density.FromGramsPerDeciLiter(kilogrampercubicmeter.GramsPerDeciLiter).KilogramsPerCubicMeter, GramsPerDeciLiterTolerance);
            AssertEx.EqualTolerance(1, Density.FromGramsPerLiter(kilogrampercubicmeter.GramsPerLiter).KilogramsPerCubicMeter, GramsPerLiterTolerance);
            AssertEx.EqualTolerance(1, Density.FromGramsPerMilliliter(kilogrampercubicmeter.GramsPerMilliliter).KilogramsPerCubicMeter, GramsPerMilliliterTolerance);
            AssertEx.EqualTolerance(1, Density.FromKilogramsPerCubicCentimeter(kilogrampercubicmeter.KilogramsPerCubicCentimeter).KilogramsPerCubicMeter, KilogramsPerCubicCentimeterTolerance);
            AssertEx.EqualTolerance(1, Density.FromKilogramsPerCubicDecimeter(kilogrampercubicmeter.KilogramsPerCubicDecimeter).KilogramsPerCubicMeter, KilogramsPerCubicDecimeterTolerance);
            AssertEx.EqualTolerance(1, Density.FromKilogramsPerCubicMeter(kilogrampercubicmeter.KilogramsPerCubicMeter).KilogramsPerCubicMeter, KilogramsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(1, Density.FromKilogramsPerCubicMillimeter(kilogrampercubicmeter.KilogramsPerCubicMillimeter).KilogramsPerCubicMeter, KilogramsPerCubicMillimeterTolerance);
            AssertEx.EqualTolerance(1, Density.FromKilogramsPerLiter(kilogrampercubicmeter.KilogramsPerLiter).KilogramsPerCubicMeter, KilogramsPerLiterTolerance);
            AssertEx.EqualTolerance(1, Density.FromKilopoundsPerCubicFoot(kilogrampercubicmeter.KilopoundsPerCubicFoot).KilogramsPerCubicMeter, KilopoundsPerCubicFootTolerance);
            AssertEx.EqualTolerance(1, Density.FromKilopoundsPerCubicInch(kilogrampercubicmeter.KilopoundsPerCubicInch).KilogramsPerCubicMeter, KilopoundsPerCubicInchTolerance);
            AssertEx.EqualTolerance(1, Density.FromMicrogramsPerCubicMeter(kilogrampercubicmeter.MicrogramsPerCubicMeter).KilogramsPerCubicMeter, MicrogramsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(1, Density.FromMicrogramsPerDeciLiter(kilogrampercubicmeter.MicrogramsPerDeciLiter).KilogramsPerCubicMeter, MicrogramsPerDeciLiterTolerance);
            AssertEx.EqualTolerance(1, Density.FromMicrogramsPerLiter(kilogrampercubicmeter.MicrogramsPerLiter).KilogramsPerCubicMeter, MicrogramsPerLiterTolerance);
            AssertEx.EqualTolerance(1, Density.FromMicrogramsPerMilliliter(kilogrampercubicmeter.MicrogramsPerMilliliter).KilogramsPerCubicMeter, MicrogramsPerMilliliterTolerance);
            AssertEx.EqualTolerance(1, Density.FromMilligramsPerCubicMeter(kilogrampercubicmeter.MilligramsPerCubicMeter).KilogramsPerCubicMeter, MilligramsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(1, Density.FromMilligramsPerDeciLiter(kilogrampercubicmeter.MilligramsPerDeciLiter).KilogramsPerCubicMeter, MilligramsPerDeciLiterTolerance);
            AssertEx.EqualTolerance(1, Density.FromMilligramsPerLiter(kilogrampercubicmeter.MilligramsPerLiter).KilogramsPerCubicMeter, MilligramsPerLiterTolerance);
            AssertEx.EqualTolerance(1, Density.FromMilligramsPerMilliliter(kilogrampercubicmeter.MilligramsPerMilliliter).KilogramsPerCubicMeter, MilligramsPerMilliliterTolerance);
            AssertEx.EqualTolerance(1, Density.FromNanogramsPerDeciLiter(kilogrampercubicmeter.NanogramsPerDeciLiter).KilogramsPerCubicMeter, NanogramsPerDeciLiterTolerance);
            AssertEx.EqualTolerance(1, Density.FromNanogramsPerLiter(kilogrampercubicmeter.NanogramsPerLiter).KilogramsPerCubicMeter, NanogramsPerLiterTolerance);
            AssertEx.EqualTolerance(1, Density.FromNanogramsPerMilliliter(kilogrampercubicmeter.NanogramsPerMilliliter).KilogramsPerCubicMeter, NanogramsPerMilliliterTolerance);
            AssertEx.EqualTolerance(1, Density.FromPicogramsPerDeciLiter(kilogrampercubicmeter.PicogramsPerDeciLiter).KilogramsPerCubicMeter, PicogramsPerDeciLiterTolerance);
            AssertEx.EqualTolerance(1, Density.FromPicogramsPerLiter(kilogrampercubicmeter.PicogramsPerLiter).KilogramsPerCubicMeter, PicogramsPerLiterTolerance);
            AssertEx.EqualTolerance(1, Density.FromPicogramsPerMilliliter(kilogrampercubicmeter.PicogramsPerMilliliter).KilogramsPerCubicMeter, PicogramsPerMilliliterTolerance);
            AssertEx.EqualTolerance(1, Density.FromPoundsPerCubicFoot(kilogrampercubicmeter.PoundsPerCubicFoot).KilogramsPerCubicMeter, PoundsPerCubicFootTolerance);
            AssertEx.EqualTolerance(1, Density.FromPoundsPerCubicInch(kilogrampercubicmeter.PoundsPerCubicInch).KilogramsPerCubicMeter, PoundsPerCubicInchTolerance);
            AssertEx.EqualTolerance(1, Density.FromPoundsPerImperialGallon(kilogrampercubicmeter.PoundsPerImperialGallon).KilogramsPerCubicMeter, PoundsPerImperialGallonTolerance);
            AssertEx.EqualTolerance(1, Density.FromPoundsPerUSGallon(kilogrampercubicmeter.PoundsPerUSGallon).KilogramsPerCubicMeter, PoundsPerUSGallonTolerance);
            AssertEx.EqualTolerance(1, Density.FromSlugsPerCubicFoot(kilogrampercubicmeter.SlugsPerCubicFoot).KilogramsPerCubicMeter, SlugsPerCubicFootTolerance);
            AssertEx.EqualTolerance(1, Density.FromSpecificGravity(kilogrampercubicmeter.SpecificGravity).KilogramsPerCubicMeter, SpecificGravityTolerance);
            AssertEx.EqualTolerance(1, Density.FromTonnesPerCubicCentimeter(kilogrampercubicmeter.TonnesPerCubicCentimeter).KilogramsPerCubicMeter, TonnesPerCubicCentimeterTolerance);
            AssertEx.EqualTolerance(1, Density.FromTonnesPerCubicMeter(kilogrampercubicmeter.TonnesPerCubicMeter).KilogramsPerCubicMeter, TonnesPerCubicMeterTolerance);
            AssertEx.EqualTolerance(1, Density.FromTonnesPerCubicMillimeter(kilogrampercubicmeter.TonnesPerCubicMillimeter).KilogramsPerCubicMeter, TonnesPerCubicMillimeterTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            Density v = Density.FromKilogramsPerCubicMeter(1);
            AssertEx.EqualTolerance(-1, -v.KilogramsPerCubicMeter, KilogramsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(2, (Density.FromKilogramsPerCubicMeter(3)-v).KilogramsPerCubicMeter, KilogramsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(2, (v + v).KilogramsPerCubicMeter, KilogramsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(10, (v*10).KilogramsPerCubicMeter, KilogramsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(10, (10*v).KilogramsPerCubicMeter, KilogramsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(2, (Density.FromKilogramsPerCubicMeter(10)/5).KilogramsPerCubicMeter, KilogramsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(2, Density.FromKilogramsPerCubicMeter(10)/Density.FromKilogramsPerCubicMeter(5), KilogramsPerCubicMeterTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            Density oneKilogramPerCubicMeter = Density.FromKilogramsPerCubicMeter(1);
            Density twoKilogramsPerCubicMeter = Density.FromKilogramsPerCubicMeter(2);

            Assert.True(oneKilogramPerCubicMeter < twoKilogramsPerCubicMeter);
            Assert.True(oneKilogramPerCubicMeter <= twoKilogramsPerCubicMeter);
            Assert.True(twoKilogramsPerCubicMeter > oneKilogramPerCubicMeter);
            Assert.True(twoKilogramsPerCubicMeter >= oneKilogramPerCubicMeter);

            Assert.False(oneKilogramPerCubicMeter > twoKilogramsPerCubicMeter);
            Assert.False(oneKilogramPerCubicMeter >= twoKilogramsPerCubicMeter);
            Assert.False(twoKilogramsPerCubicMeter < oneKilogramPerCubicMeter);
            Assert.False(twoKilogramsPerCubicMeter <= oneKilogramPerCubicMeter);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            Density kilogrampercubicmeter = Density.FromKilogramsPerCubicMeter(1);
            Assert.Equal(0, kilogrampercubicmeter.CompareTo(kilogrampercubicmeter));
            Assert.True(kilogrampercubicmeter.CompareTo(Density.Zero) > 0);
            Assert.True(Density.Zero.CompareTo(kilogrampercubicmeter) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            Density kilogrampercubicmeter = Density.FromKilogramsPerCubicMeter(1);
            Assert.Throws<ArgumentException>(() => kilogrampercubicmeter.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            Density kilogrampercubicmeter = Density.FromKilogramsPerCubicMeter(1);
            Assert.Throws<ArgumentNullException>(() => kilogrampercubicmeter.CompareTo(null));
        }

        [Fact]
        public void EqualityOperators()
        {
            var a = Density.FromKilogramsPerCubicMeter(1);
            var b = Density.FromKilogramsPerCubicMeter(2);

 // ReSharper disable EqualExpressionComparison

            Assert.True(a == a);
            Assert.False(a != a);

            Assert.True(a != b);
            Assert.False(a == b);

            Assert.False(a == null);
            Assert.False(null == a);

// ReSharper restore EqualExpressionComparison
        }

        [Fact]
        public void Equals_SameType_IsImplemented()
        {
            var a = Density.FromKilogramsPerCubicMeter(1);
            var b = Density.FromKilogramsPerCubicMeter(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
        }

        [Fact]
        public void Equals_QuantityAsObject_IsImplemented()
        {
            object a = Density.FromKilogramsPerCubicMeter(1);
            object b = Density.FromKilogramsPerCubicMeter(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
            Assert.False(a.Equals((object)null));
        }

        [Fact]
        public void Equals_RelativeTolerance_IsImplemented()
        {
            var v = Density.FromKilogramsPerCubicMeter(1);
            Assert.True(v.Equals(Density.FromKilogramsPerCubicMeter(1), KilogramsPerCubicMeterTolerance, ComparisonType.Relative));
            Assert.False(v.Equals(Density.Zero, KilogramsPerCubicMeterTolerance, ComparisonType.Relative));
        }

        [Fact]
        public void Equals_NegativeRelativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var v = Density.FromKilogramsPerCubicMeter(1);
            Assert.Throws<ArgumentOutOfRangeException>(() => v.Equals(Density.FromKilogramsPerCubicMeter(1), -1, ComparisonType.Relative));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            Density kilogrampercubicmeter = Density.FromKilogramsPerCubicMeter(1);
            Assert.False(kilogrampercubicmeter.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            Density kilogrampercubicmeter = Density.FromKilogramsPerCubicMeter(1);
            Assert.False(kilogrampercubicmeter.Equals(null));
        }

        [Fact]
        public void UnitsDoesNotContainUndefined()
        {
            Assert.DoesNotContain(DensityUnit.Undefined, Density.Units);
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues(typeof(DensityUnit)).Cast<DensityUnit>();
            foreach(var unit in units)
            {
                if(unit == DensityUnit.Undefined)
                    continue;

                var defaultAbbreviation = UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(Density.BaseDimensions is null);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            var prevCulture = Thread.CurrentThread.CurrentUICulture;
            Thread.CurrentThread.CurrentUICulture = CultureInfo.GetCultureInfo("en-US");
            try {
                Assert.Equal("1 cg/dl", new Density(1, DensityUnit.CentigramPerDeciliter).ToString());
                Assert.Equal("1 cg/L", new Density(1, DensityUnit.CentigramPerLiter).ToString());
                Assert.Equal("1 cg/ml", new Density(1, DensityUnit.CentigramPerMilliliter).ToString());
                Assert.Equal("1 dg/dl", new Density(1, DensityUnit.DecigramPerDeciliter).ToString());
                Assert.Equal("1 dg/L", new Density(1, DensityUnit.DecigramPerLiter).ToString());
                Assert.Equal("1 dg/ml", new Density(1, DensityUnit.DecigramPerMilliliter).ToString());
                Assert.Equal("1 g/cm³", new Density(1, DensityUnit.GramPerCubicCentimeter).ToString());
                Assert.Equal("1 g/m³", new Density(1, DensityUnit.GramPerCubicMeter).ToString());
                Assert.Equal("1 g/mm³", new Density(1, DensityUnit.GramPerCubicMillimeter).ToString());
                Assert.Equal("1 g/dl", new Density(1, DensityUnit.GramPerDeciliter).ToString());
                Assert.Equal("1 g/L", new Density(1, DensityUnit.GramPerLiter).ToString());
                Assert.Equal("1 g/ml", new Density(1, DensityUnit.GramPerMilliliter).ToString());
                Assert.Equal("1 kg/cm³", new Density(1, DensityUnit.KilogramPerCubicCentimeter).ToString());
                Assert.Equal("1 kg/dm³", new Density(1, DensityUnit.KilogramPerCubicDecimeter).ToString());
                Assert.Equal("1 kg/m³", new Density(1, DensityUnit.KilogramPerCubicMeter).ToString());
                Assert.Equal("1 kg/mm³", new Density(1, DensityUnit.KilogramPerCubicMillimeter).ToString());
                Assert.Equal("1 kg/l", new Density(1, DensityUnit.KilogramPerLiter).ToString());
                Assert.Equal("1 kip/ft³", new Density(1, DensityUnit.KilopoundPerCubicFoot).ToString());
                Assert.Equal("1 kip/in³", new Density(1, DensityUnit.KilopoundPerCubicInch).ToString());
                Assert.Equal("1 µg/m³", new Density(1, DensityUnit.MicrogramPerCubicMeter).ToString());
                Assert.Equal("1 µg/dl", new Density(1, DensityUnit.MicrogramPerDeciliter).ToString());
                Assert.Equal("1 µg/L", new Density(1, DensityUnit.MicrogramPerLiter).ToString());
                Assert.Equal("1 µg/ml", new Density(1, DensityUnit.MicrogramPerMilliliter).ToString());
                Assert.Equal("1 mg/m³", new Density(1, DensityUnit.MilligramPerCubicMeter).ToString());
                Assert.Equal("1 mg/dl", new Density(1, DensityUnit.MilligramPerDeciliter).ToString());
                Assert.Equal("1 mg/L", new Density(1, DensityUnit.MilligramPerLiter).ToString());
                Assert.Equal("1 mg/ml", new Density(1, DensityUnit.MilligramPerMilliliter).ToString());
                Assert.Equal("1 ng/dl", new Density(1, DensityUnit.NanogramPerDeciliter).ToString());
                Assert.Equal("1 ng/L", new Density(1, DensityUnit.NanogramPerLiter).ToString());
                Assert.Equal("1 ng/ml", new Density(1, DensityUnit.NanogramPerMilliliter).ToString());
                Assert.Equal("1 pg/dl", new Density(1, DensityUnit.PicogramPerDeciliter).ToString());
                Assert.Equal("1 pg/L", new Density(1, DensityUnit.PicogramPerLiter).ToString());
                Assert.Equal("1 pg/ml", new Density(1, DensityUnit.PicogramPerMilliliter).ToString());
                Assert.Equal("1 lb/ft³", new Density(1, DensityUnit.PoundPerCubicFoot).ToString());
                Assert.Equal("1 lb/in³", new Density(1, DensityUnit.PoundPerCubicInch).ToString());
                Assert.Equal("1 ppg (imp.)", new Density(1, DensityUnit.PoundPerImperialGallon).ToString());
                Assert.Equal("1 ppg (U.S.)", new Density(1, DensityUnit.PoundPerUSGallon).ToString());
                Assert.Equal("1 slug/ft³", new Density(1, DensityUnit.SlugPerCubicFoot).ToString());
                Assert.Equal("1 sg", new Density(1, DensityUnit.SpecificGravity).ToString());
                Assert.Equal("1 t/cm³", new Density(1, DensityUnit.TonnePerCubicCentimeter).ToString());
                Assert.Equal("1 t/m³", new Density(1, DensityUnit.TonnePerCubicMeter).ToString());
                Assert.Equal("1 t/mm³", new Density(1, DensityUnit.TonnePerCubicMillimeter).ToString());
            }
            finally
            {
                Thread.CurrentThread.CurrentUICulture = prevCulture;
            }
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 cg/dl", new Density(1, DensityUnit.CentigramPerDeciliter).ToString(swedishCulture));
            Assert.Equal("1 cg/L", new Density(1, DensityUnit.CentigramPerLiter).ToString(swedishCulture));
            Assert.Equal("1 cg/ml", new Density(1, DensityUnit.CentigramPerMilliliter).ToString(swedishCulture));
            Assert.Equal("1 dg/dl", new Density(1, DensityUnit.DecigramPerDeciliter).ToString(swedishCulture));
            Assert.Equal("1 dg/L", new Density(1, DensityUnit.DecigramPerLiter).ToString(swedishCulture));
            Assert.Equal("1 dg/ml", new Density(1, DensityUnit.DecigramPerMilliliter).ToString(swedishCulture));
            Assert.Equal("1 g/cm³", new Density(1, DensityUnit.GramPerCubicCentimeter).ToString(swedishCulture));
            Assert.Equal("1 g/m³", new Density(1, DensityUnit.GramPerCubicMeter).ToString(swedishCulture));
            Assert.Equal("1 g/mm³", new Density(1, DensityUnit.GramPerCubicMillimeter).ToString(swedishCulture));
            Assert.Equal("1 g/dl", new Density(1, DensityUnit.GramPerDeciliter).ToString(swedishCulture));
            Assert.Equal("1 g/L", new Density(1, DensityUnit.GramPerLiter).ToString(swedishCulture));
            Assert.Equal("1 g/ml", new Density(1, DensityUnit.GramPerMilliliter).ToString(swedishCulture));
            Assert.Equal("1 kg/cm³", new Density(1, DensityUnit.KilogramPerCubicCentimeter).ToString(swedishCulture));
            Assert.Equal("1 kg/dm³", new Density(1, DensityUnit.KilogramPerCubicDecimeter).ToString(swedishCulture));
            Assert.Equal("1 kg/m³", new Density(1, DensityUnit.KilogramPerCubicMeter).ToString(swedishCulture));
            Assert.Equal("1 kg/mm³", new Density(1, DensityUnit.KilogramPerCubicMillimeter).ToString(swedishCulture));
            Assert.Equal("1 kg/l", new Density(1, DensityUnit.KilogramPerLiter).ToString(swedishCulture));
            Assert.Equal("1 kip/ft³", new Density(1, DensityUnit.KilopoundPerCubicFoot).ToString(swedishCulture));
            Assert.Equal("1 kip/in³", new Density(1, DensityUnit.KilopoundPerCubicInch).ToString(swedishCulture));
            Assert.Equal("1 µg/m³", new Density(1, DensityUnit.MicrogramPerCubicMeter).ToString(swedishCulture));
            Assert.Equal("1 µg/dl", new Density(1, DensityUnit.MicrogramPerDeciliter).ToString(swedishCulture));
            Assert.Equal("1 µg/L", new Density(1, DensityUnit.MicrogramPerLiter).ToString(swedishCulture));
            Assert.Equal("1 µg/ml", new Density(1, DensityUnit.MicrogramPerMilliliter).ToString(swedishCulture));
            Assert.Equal("1 mg/m³", new Density(1, DensityUnit.MilligramPerCubicMeter).ToString(swedishCulture));
            Assert.Equal("1 mg/dl", new Density(1, DensityUnit.MilligramPerDeciliter).ToString(swedishCulture));
            Assert.Equal("1 mg/L", new Density(1, DensityUnit.MilligramPerLiter).ToString(swedishCulture));
            Assert.Equal("1 mg/ml", new Density(1, DensityUnit.MilligramPerMilliliter).ToString(swedishCulture));
            Assert.Equal("1 ng/dl", new Density(1, DensityUnit.NanogramPerDeciliter).ToString(swedishCulture));
            Assert.Equal("1 ng/L", new Density(1, DensityUnit.NanogramPerLiter).ToString(swedishCulture));
            Assert.Equal("1 ng/ml", new Density(1, DensityUnit.NanogramPerMilliliter).ToString(swedishCulture));
            Assert.Equal("1 pg/dl", new Density(1, DensityUnit.PicogramPerDeciliter).ToString(swedishCulture));
            Assert.Equal("1 pg/L", new Density(1, DensityUnit.PicogramPerLiter).ToString(swedishCulture));
            Assert.Equal("1 pg/ml", new Density(1, DensityUnit.PicogramPerMilliliter).ToString(swedishCulture));
            Assert.Equal("1 lb/ft³", new Density(1, DensityUnit.PoundPerCubicFoot).ToString(swedishCulture));
            Assert.Equal("1 lb/in³", new Density(1, DensityUnit.PoundPerCubicInch).ToString(swedishCulture));
            Assert.Equal("1 ppg (imp.)", new Density(1, DensityUnit.PoundPerImperialGallon).ToString(swedishCulture));
            Assert.Equal("1 ppg (U.S.)", new Density(1, DensityUnit.PoundPerUSGallon).ToString(swedishCulture));
            Assert.Equal("1 slug/ft³", new Density(1, DensityUnit.SlugPerCubicFoot).ToString(swedishCulture));
            Assert.Equal("1 sg", new Density(1, DensityUnit.SpecificGravity).ToString(swedishCulture));
            Assert.Equal("1 t/cm³", new Density(1, DensityUnit.TonnePerCubicCentimeter).ToString(swedishCulture));
            Assert.Equal("1 t/m³", new Density(1, DensityUnit.TonnePerCubicMeter).ToString(swedishCulture));
            Assert.Equal("1 t/mm³", new Density(1, DensityUnit.TonnePerCubicMillimeter).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var oldCulture = CultureInfo.CurrentUICulture;
            try
            {
                CultureInfo.CurrentUICulture = CultureInfo.InvariantCulture;
                Assert.Equal("0.1 kg/m³", new Density(0.123456, DensityUnit.KilogramPerCubicMeter).ToString("s1"));
                Assert.Equal("0.12 kg/m³", new Density(0.123456, DensityUnit.KilogramPerCubicMeter).ToString("s2"));
                Assert.Equal("0.123 kg/m³", new Density(0.123456, DensityUnit.KilogramPerCubicMeter).ToString("s3"));
                Assert.Equal("0.1235 kg/m³", new Density(0.123456, DensityUnit.KilogramPerCubicMeter).ToString("s4"));
            }
            finally
            {
                CultureInfo.CurrentUICulture = oldCulture;
            }
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 kg/m³", new Density(0.123456, DensityUnit.KilogramPerCubicMeter).ToString("s1", culture));
            Assert.Equal("0.12 kg/m³", new Density(0.123456, DensityUnit.KilogramPerCubicMeter).ToString("s2", culture));
            Assert.Equal("0.123 kg/m³", new Density(0.123456, DensityUnit.KilogramPerCubicMeter).ToString("s3", culture));
            Assert.Equal("0.1235 kg/m³", new Density(0.123456, DensityUnit.KilogramPerCubicMeter).ToString("s4", culture));
        }

        #pragma warning disable 612, 618

        [Fact]
        public void ToString_NullFormat_ThrowsArgumentNullException()
        {
            var quantity = Density.FromKilogramsPerCubicMeter(1.0);
            Assert.Throws<ArgumentNullException>(() => quantity.ToString(null, null, null));
        }

        [Fact]
        public void ToString_NullArgs_ThrowsArgumentNullException()
        {
            var quantity = Density.FromKilogramsPerCubicMeter(1.0);
            Assert.Throws<ArgumentNullException>(() => quantity.ToString(null, "g", null));
        }

        [Fact]
        public void ToString_NullProvider_EqualsCurrentUICulture()
        {
            var quantity = Density.FromKilogramsPerCubicMeter(1.0);
            Assert.Equal(quantity.ToString(CultureInfo.CurrentUICulture, "g"), quantity.ToString(null, "g"));
        }

        #pragma warning restore 612, 618

        [Fact]
        public void Convert_ToBool_ThrowsInvalidCastException()
        {
            var quantity = Density.FromKilogramsPerCubicMeter(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToBoolean(quantity));
        }

        [Fact]
        public void Convert_ToByte_EqualsValueAsSameType()
        {
            var quantity = Density.FromKilogramsPerCubicMeter(1.0);
           Assert.Equal((byte)quantity.Value, Convert.ToByte(quantity));
        }

        [Fact]
        public void Convert_ToChar_ThrowsInvalidCastException()
        {
            var quantity = Density.FromKilogramsPerCubicMeter(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToChar(quantity));
        }

        [Fact]
        public void Convert_ToDateTime_ThrowsInvalidCastException()
        {
            var quantity = Density.FromKilogramsPerCubicMeter(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToDateTime(quantity));
        }

        [Fact]
        public void Convert_ToDecimal_EqualsValueAsSameType()
        {
            var quantity = Density.FromKilogramsPerCubicMeter(1.0);
            Assert.Equal((decimal)quantity.Value, Convert.ToDecimal(quantity));
        }

        [Fact]
        public void Convert_ToDouble_EqualsValueAsSameType()
        {
            var quantity = Density.FromKilogramsPerCubicMeter(1.0);
            Assert.Equal((double)quantity.Value, Convert.ToDouble(quantity));
        }

        [Fact]
        public void Convert_ToInt16_EqualsValueAsSameType()
        {
            var quantity = Density.FromKilogramsPerCubicMeter(1.0);
            Assert.Equal((short)quantity.Value, Convert.ToInt16(quantity));
        }

        [Fact]
        public void Convert_ToInt32_EqualsValueAsSameType()
        {
            var quantity = Density.FromKilogramsPerCubicMeter(1.0);
            Assert.Equal((int)quantity.Value, Convert.ToInt32(quantity));
        }

        [Fact]
        public void Convert_ToInt64_EqualsValueAsSameType()
        {
            var quantity = Density.FromKilogramsPerCubicMeter(1.0);
            Assert.Equal((long)quantity.Value, Convert.ToInt64(quantity));
        }

        [Fact]
        public void Convert_ToSByte_EqualsValueAsSameType()
        {
            var quantity = Density.FromKilogramsPerCubicMeter(1.0);
            Assert.Equal((sbyte)quantity.Value, Convert.ToSByte(quantity));
        }

        [Fact]
        public void Convert_ToSingle_EqualsValueAsSameType()
        {
            var quantity = Density.FromKilogramsPerCubicMeter(1.0);
            Assert.Equal((float)quantity.Value, Convert.ToSingle(quantity));
        }

        [Fact]
        public void Convert_ToString_EqualsToString()
        {
            var quantity = Density.FromKilogramsPerCubicMeter(1.0);
            Assert.Equal(quantity.ToString(), Convert.ToString(quantity));
        }

        [Fact]
        public void Convert_ToUInt16_EqualsValueAsSameType()
        {
            var quantity = Density.FromKilogramsPerCubicMeter(1.0);
            Assert.Equal((ushort)quantity.Value, Convert.ToUInt16(quantity));
        }

        [Fact]
        public void Convert_ToUInt32_EqualsValueAsSameType()
        {
            var quantity = Density.FromKilogramsPerCubicMeter(1.0);
            Assert.Equal((uint)quantity.Value, Convert.ToUInt32(quantity));
        }

        [Fact]
        public void Convert_ToUInt64_EqualsValueAsSameType()
        {
            var quantity = Density.FromKilogramsPerCubicMeter(1.0);
            Assert.Equal((ulong)quantity.Value, Convert.ToUInt64(quantity));
        }

        [Fact]
        public void Convert_ChangeType_SelfType_EqualsSelf()
        {
            var quantity = Density.FromKilogramsPerCubicMeter(1.0);
            Assert.Equal(quantity, Convert.ChangeType(quantity, typeof(Density)));
        }

        [Fact]
        public void Convert_ChangeType_UnitType_EqualsUnit()
        {
            var quantity = Density.FromKilogramsPerCubicMeter(1.0);
            Assert.Equal(quantity.Unit, Convert.ChangeType(quantity, typeof(DensityUnit)));
        }

        [Fact]
        public void Convert_ChangeType_QuantityType_EqualsQuantityType()
        {
            var quantity = Density.FromKilogramsPerCubicMeter(1.0);
            Assert.Equal(QuantityType.Density, Convert.ChangeType(quantity, typeof(QuantityType)));
        }

        [Fact]
        public void Convert_ChangeType_BaseDimensions_EqualsBaseDimensions()
        {
            var quantity = Density.FromKilogramsPerCubicMeter(1.0);
            Assert.Equal(Density.BaseDimensions, Convert.ChangeType(quantity, typeof(BaseDimensions)));
        }

        [Fact]
        public void Convert_ChangeType_InvalidType_ThrowsInvalidCastException()
        {
            var quantity = Density.FromKilogramsPerCubicMeter(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ChangeType(quantity, typeof(QuantityFormatter)));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = Density.FromKilogramsPerCubicMeter(1.0);
            Assert.Equal(new {Density.QuantityType, quantity.Value, quantity.Unit}.GetHashCode(), quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = Density.FromKilogramsPerCubicMeter(value);
            Assert.Equal(Density.FromKilogramsPerCubicMeter(-value), -quantity);
        }

    }
}
